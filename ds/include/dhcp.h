#ifndef __OL87_DHCP_H__
#define __OL87_DHCP_H__

#include <stddef.h>		/*for size_t*/

#define IP_LEN (4)

typedef struct dhcp dhcp_t;

/* struct ip - enable passing ip by value to functions */
typedef struct ip
{
	unsigned char ip_chars[IP_LEN];
} ip_t; 

typedef enum dhcp_status 
{
	DHCP_SUCCESS,
	DHCP_MALLOC_FAIL,
	DHCP_NO_FREE_IP,
	DHCP_REQUEST_TAKEN,
	DHCP_ALREADY_FREE,
	DHCP_INVALID_FREE
} dhcp_status_t;

/*	O(1) create trie of size n. preallocate
	locked_bits < 32 
	if fail return NULL */
dhcp_t *DHCPCreate(ip_t subnet_id, size_t locked_bits);

/*------------------------------------------------------------------------------
O(n)
destroy dhcp (post order)
on success: destroys dhcp
on fail: ---
udefined behaviour: dhcp == NULL
*/	
void DHCPDestroy(dhcp_t *dhcp);

/*------------------------------------------------------------------------------
O(n)
on success: returns amount of free leaves - addresses (pre-order)
on fail: ---
udefined behaviour: dhcp == NULL
*/	
size_t DHCPCountFree(const dhcp_t *dhcp);

/*	O(log n) 
	fail when no free adresses are available
	fail due to malloc
	success return 0 */
dhcp_status_t DHCPAllocateIp(dhcp_t *dhcp, ip_t ip_request, ip_t *return_ip);

/*	O(log n)	
	can only free ips generated
	return SUCCESS 
	INVALID_FREE for adress already freed
	unspecified: ip recivded was not generated by dhcp */
dhcp_status_t DHCPFreeIp(dhcp_t *dhcp, ip_t ip);

#endif



